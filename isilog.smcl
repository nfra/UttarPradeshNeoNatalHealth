{smcl}
{com}{sf}{ul off}{txt}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}C:\Users\Nathan\Documents\RA Research\Uttar Pradesh Neo-natal Health\UttarPradeshNeoNatalHealth\isilog.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res}14 Apr 2020, 18:06:47
{txt}
{com}. 
. use ".\data\nfhs4_files\IABR74FL.DTA"
{txt}
{com}. 
. egen strata = group(v024 v025) // this makes a distinct number for each combination of v023 and v022 and calls that variable strata
{txt}
{com}. egen psu = group(v001 v024 v025) // sometimes v001 is repeated across strata; better safe than sorry
{txt}
{com}. svyset psu [pweight = v005], strata(strata) // v005 is the weight

      {txt}pweight:{col 16}{res}v005
          {txt}VCE:{col 16}{res}linearized
  {txt}Single unit:{col 16}{res}missing
     {txt}Strata 1:{col 16}{res}strata
         {txt}SU 1:{col 16}{res}psu
        {txt}FPC 1:{col 16}<zero>
{p2colreset}{...}

{com}. 
. 
. * Keep only births in simple look-back period (technically incorrect):
. keep if b3 > v008 - 61 & b3 < v008
{txt}(1,053,407 observations deleted)

{com}. 
. * TODO: Fix look-back period
. 
. * Remove the outliers below 4.5 ft (137.2 cm) and above 6 ft (182.9)
. keep if v438 >= 1372 & v438 <= 1829
{txt}(5,213 observations deleted)

{com}. 
. * Divide height by 10 because v438 is stored with units of tenths of centimeters
. gen mother_height_cm = v438/10
{txt}
{com}. 
. * Divide weights by 1,000,000 because v005 is stored with 6 decimal places
. gen sample_weight = v005/1000000
{txt}
{com}. 
. * Create group variable, equals 1 if observation is from Uttar Pradesh, else 0
. gen is_from_uttar_pradesh = 0
{txt}
{com}. replace is_from_uttar_pradesh = 1 if v024 == 33
{txt}(41,394 real changes made)

{com}. 
. 
. * Create variable for neonatal mortality
. gen is_neonatal_death = 0
{txt}
{com}. replace is_neonatal_death = 1000 if b7 < 1 // for conventional units of "per thousand"
{txt}(7,593 real changes made)

{com}. 
. gen group = is_from_uttar_pradesh // This will be useful so you can see the logic below]
{txt}
{com}. gen outcomevariable = is_neonatal_death // Again, to make this more generic
{txt}
{com}. gen full = outcomevariable!=.&group!=. // This will be useful to define our maximum sample
{txt}
{com}. gen group1 = group == 1&full == 1
{txt}
{com}. gen group0 = group == 0&full == 1
{txt}
{com}. 
. 
. * For a figure without the big dots
. * The purpose of this variable is to make a puzzle seem interesting: even at all levels of running variable, there is still a big gap in the outcome variable between groups
. 
. *gen runningvariable = mother_height_cm  // so here, we're showing that mother's height doesn't explain the Uttar Pradesh-rest of india NNM gap
. *twoway (lpoly outcomevariable runningvariable if group == 1 [aweight=sample_weight],  lc(navy) lw(medthick) ) (lpoly outcomevariable runningvariable if group == 0 [aweight=sample_weight],  lc(forest_green) lw(medthick) lp(longdash)) if full == 1, legend(col(2) order(1 "Uttar Pradesh" 2 "Rest of India")) xtitle("Mother's Height (cm)") ytitle("NNM (per thousand births)") graphr(c(white) lc(white)) name(puzzlegraph)
. *graph save puzzlegraph "Graphfilename.gph", replace
. *graph export "Graphfilename.pdf", as(pdf) replace
. 
. **************************************************************
. ** making categorical versions of mother's height ************
. **************************************************************
. 
. * Create table of deciles for mother's heights, with count and mean
. _pctile mother_height_cm, p(10(10)90)
{txt}
{com}.  ret li

{txt}scalars:
                 r(r1) =  {res}144.6000061035156
                 {txt}r(r2) =  {res}147.1000061035156
                 {txt}r(r3) =  {res}148.8000030517578
                 {txt}r(r4) =  {res}150.1999969482422
                 {txt}r(r5) =  {res}151.6000061035156
                 {txt}r(r6) =  {res}153
                 {txt}r(r7) =  {res}154.5
                 {txt}r(r8) =  {res}156.3999938964844
                 {txt}r(r9) =  {res}159.1000061035156
{txt}
{com}.  gen mother_height_decile = 10 if mother_height_cm < .
{txt}
{com}.  qui forval i = 9(-1)1 {c -(}
{txt}
{com}. 
. * Create table of centiles for mother's height, with count and mean
. _pctile mother_height_cm, p(1(1)99)
{txt}
{com}.  ret li

{txt}scalars:
                 r(r1) =  {res}139.3999938964844
                 {txt}r(r2) =  {res}140.5
                 {txt}r(r3) =  {res}141.3999938964844
                 {txt}r(r4) =  {res}142.1000061035156
                 {txt}r(r5) =  {res}142.6000061035156
                 {txt}r(r6) =  {res}143.1000061035156
                 {txt}r(r7) =  {res}143.5
                 {txt}r(r8) =  {res}143.8999938964844
                 {txt}r(r9) =  {res}144.3000030517578
                {txt}r(r10) =  {res}144.6000061035156
                {txt}r(r11) =  {res}144.8999938964844
                {txt}r(r12) =  {res}145.1999969482422
                {txt}r(r13) =  {res}145.5
                {txt}r(r14) =  {res}145.6999969482422
                {txt}r(r15) =  {res}146
                {txt}r(r16) =  {res}146.1999969482422
                {txt}r(r17) =  {res}146.3999938964844
                {txt}r(r18) =  {res}146.6999969482422
                {txt}r(r19) =  {res}146.8999938964844
                {txt}r(r20) =  {res}147.1000061035156
                {txt}r(r99) =  {res}165.6000061035156
                {txt}r(r98) =  {res}163.8000030517578
                {txt}r(r97) =  {res}162.6000061035156
                {txt}r(r96) =  {res}161.8000030517578
                {txt}r(r95) =  {res}161.1999969482422
                {txt}r(r94) =  {res}160.5
                {txt}r(r93) =  {res}160.1999969482422
                {txt}r(r92) =  {res}159.8000030517578
                {txt}r(r91) =  {res}159.3999938964844
                {txt}r(r90) =  {res}159.1000061035156
                {txt}r(r89) =  {res}158.6999969482422
                {txt}r(r88) =  {res}158.3999938964844
                {txt}r(r87) =  {res}158.1999969482422
                {txt}r(r86) =  {res}157.8999938964844
                {txt}r(r85) =  {res}157.6000061035156
                {txt}r(r84) =  {res}157.3999938964844
                {txt}r(r83) =  {res}157.1999969482422
                {txt}r(r82) =  {res}156.8999938964844
                {txt}r(r81) =  {res}156.6999969482422
                {txt}r(r80) =  {res}156.3999938964844
                {txt}r(r79) =  {res}156.3000030517578
                {txt}r(r78) =  {res}156.1000061035156
                {txt}r(r77) =  {res}155.8000030517578
                {txt}r(r76) =  {res}155.6000061035156
                {txt}r(r75) =  {res}155.3999938964844
                {txt}r(r74) =  {res}155.1999969482422
                {txt}r(r73) =  {res}155.1000061035156
                {txt}r(r72) =  {res}154.8999938964844
                {txt}r(r71) =  {res}154.6999969482422
                {txt}r(r70) =  {res}154.5
                {txt}r(r69) =  {res}154.3999938964844
                {txt}r(r68) =  {res}154.1999969482422
                {txt}r(r67) =  {res}154.1000061035156
                {txt}r(r66) =  {res}153.8999938964844
                {txt}r(r65) =  {res}153.6999969482422
                {txt}r(r64) =  {res}153.6000061035156
                {txt}r(r63) =  {res}153.3999938964844
                {txt}r(r62) =  {res}153.3000030517578
                {txt}r(r61) =  {res}153.1999969482422
                {txt}r(r60) =  {res}153
                {txt}r(r59) =  {res}152.8999938964844
                {txt}r(r58) =  {res}152.6999969482422
                {txt}r(r57) =  {res}152.6000061035156
                {txt}r(r56) =  {res}152.3999938964844
                {txt}r(r55) =  {res}152.3000030517578
                {txt}r(r54) =  {res}152.1999969482422
                {txt}r(r53) =  {res}152.1000061035156
                {txt}r(r52) =  {res}151.8999938964844
                {txt}r(r51) =  {res}151.6999969482422
                {txt}r(r50) =  {res}151.6000061035156
                {txt}r(r49) =  {res}151.5
                {txt}r(r48) =  {res}151.3000030517578
                {txt}r(r47) =  {res}151.1999969482422
                {txt}r(r46) =  {res}151.1000061035156
                {txt}r(r45) =  {res}150.8999938964844
                {txt}r(r44) =  {res}150.8000030517578
                {txt}r(r43) =  {res}150.6000061035156
                {txt}r(r42) =  {res}150.3999938964844
                {txt}r(r41) =  {res}150.3000030517578
                {txt}r(r40) =  {res}150.1999969482422
                {txt}r(r39) =  {res}150.1000061035156
                {txt}r(r38) =  {res}149.8999938964844
                {txt}r(r37) =  {res}149.8000030517578
                {txt}r(r36) =  {res}149.6000061035156
                {txt}r(r35) =  {res}149.5
                {txt}r(r34) =  {res}149.3999938964844
                {txt}r(r33) =  {res}149.1999969482422
                {txt}r(r32) =  {res}149.1000061035156
                {txt}r(r31) =  {res}148.8999938964844
                {txt}r(r30) =  {res}148.8000030517578
                {txt}r(r29) =  {res}148.6000061035156
                {txt}r(r28) =  {res}148.5
                {txt}r(r27) =  {res}148.3000030517578
                {txt}r(r26) =  {res}148.1999969482422
                {txt}r(r25) =  {res}148
                {txt}r(r24) =  {res}147.8000030517578
                {txt}r(r23) =  {res}147.6000061035156
                {txt}r(r22) =  {res}147.5
                {txt}r(r21) =  {res}147.3000030517578
{txt}
{com}.  gen mother_height_centile = 100 if mother_height_cm < .
{txt}
{com}.  qui forval i = 99(-1)1 {c -(}
{txt}
{com}.  
. **************************************************************
. ** Kitagawa decomposition ************************************
. **************************************************************
.  
. sum outcomevariable [aweight = sample_weight] if group == 1

{txt}    Variable {c |}     Obs      Weight        Mean   Std. Dev.       Min        Max
{hline 13}{c +}{hline 65}
outcomevar~e {c |}{res}  41,394  44180.4858    44.52839   206.2684          0       1000
{txt}
{com}. local target_mean = r(mean)
{txt}
{com}. local target_sum_weight = r(sum_w)
{txt}
{com}. sum outcomevariable [aweight = sample_weight] if group == 0

{txt}    Variable {c |}     Obs      Weight        Mean   Std. Dev.       Min        Max
{hline 13}{c +}{hline 65}
outcomevar~e {c |}{res} 215,603  202272.241    25.86224   158.7246          0       1000
{txt}
{com}. local other_mean = r(mean)
{txt}
{com}. local other_sum_weight = r(sum_w)
{txt}
{com}. 
. * Initialize vars
. local part_due_to_rate_schedule = 0
{txt}
{com}. local part_due_to_distribution = 0
{txt}
{com}. 
. qui forval i = 10(-1)1 {c -(}
{txt}
{com}. 
. di "full gap: ",`target_mean'-`other_mean'
{res}full gap:  18.66615
{txt}
{com}. di "DECILE CALCULATION:"
{res}DECILE CALCULATION:
{txt}
{com}. di "part due to rate schedule: " `part_due_to_rate_schedule'
{res}part due to rate schedule: 16.977523
{txt}
{com}. di "percentage due to rate schedule: " `part_due_to_rate_schedule'/(`target_mean'-`other_mean')*100
{res}percentage due to rate schedule: 90.953538
{txt}
{com}. di "part due to distribution: " `part_due_to_distribution'
{res}part due to distribution: 1.6886261
{txt}
{com}. di "percentage due to distribution: " `part_due_to_distribution'/(`target_mean'-`other_mean')*100
{res}percentage due to distribution: 9.0464619
{txt}
{com}. 
. * Re-initialize vars
. local part_due_to_rate_schedule = 0
{txt}
{com}. local part_due_to_distribution = 0
{txt}
{com}. 
. qui forval i = 100(-1)1 {c -(}
{txt}
{com}. 
. 
. 
. di "CENTILE CALCULATION:"
{res}CENTILE CALCULATION:
{txt}
{com}. di "part due to rate schedule: " `part_due_to_rate_schedule'
{res}part due to rate schedule: 16.920777
{txt}
{com}. di "percentage due to rate schedule: " `part_due_to_rate_schedule'/(`target_mean'-`other_mean')*100
{res}percentage due to rate schedule: 90.649528
{txt}
{com}. di "part due to distribution: " `part_due_to_distribution'
{res}part due to distribution: 1.745373
{txt}
{com}. di "percentage due to distribution: " `part_due_to_distribution'/(`target_mean'-`other_mean')*100
{res}percentage due to distribution: 9.3504716
{txt}
{com}.  
.  
.  
. **************************************************************
. ** non-parametric reweighting decomposition ******************
. **************************************************************
. 
. gen inputbin_dec = mother_height_decile
{txt}
{com}. 
. egen overallbins_dec = group(inputbin_dec group) if full == 1
{txt}
{com}. gen weightforsumming_dec = sample_weight if full == 1
{txt}
{com}. egen sumweights_dec = sum(weightforsumming_dec) if full == 1, by(overallbins_dec)
{txt}
{com}. gen sumweights1_dec = sumweights_dec if group == 1
{txt}(215,603 missing values generated)

{com}. egen transfersumweights_dec = mean(sumweights1_dec), by(inputbin_dec)
{txt}
{com}. gen multiplier_dec = transfersumweights_dec/sumweights_dec if group == 0
{txt}(41,394 missing values generated)

{com}. gen newweights_dec = sample_weight*multiplier_dec if group == 0
{txt}(41,394 missing values generated)

{com}. 
. sum outcomevariable [aweight = sample_weight] if group == 1

{txt}    Variable {c |}     Obs      Weight        Mean   Std. Dev.       Min        Max
{hline 13}{c +}{hline 65}
outcomevar~e {c |}{res}  41,394  44180.4858    44.52839   206.2684          0       1000
{txt}
{com}. local targetmean = r(mean)
{txt}
{com}. sum outcomevariable [aweight = sample_weight] if group == 0

{txt}    Variable {c |}     Obs      Weight        Mean   Std. Dev.       Min        Max
{hline 13}{c +}{hline 65}
outcomevar~e {c |}{res} 215,603  202272.241    25.86224   158.7246          0       1000
{txt}
{com}. local startingmean = r(mean)
{txt}
{com}. sum outcomevariable [aweight = newweights_dec] if group == 0

{txt}    Variable {c |}     Obs      Weight        Mean   Std. Dev.       Min        Max
{hline 13}{c +}{hline 65}
outcomevar~e {c |}{res} 215,603  44180.4871    27.13369   162.4733          0       1000
{txt}
{com}. local reweightedmean = r(mean)
{txt}
{com}. 
. di "full gap: ",`targetmean'-`startingmean'
{res}full gap:  18.66615
{txt}
{com}. di "DECILE CALCULATION:"
{res}DECILE CALCULATION:
{txt}
{com}. di "explained gap: ",`reweightedmean'-`startingmean'
{res}explained gap:  1.2714553
{txt}
{com}. di "unexplained gap: ",`targetmean'-`reweightedmean'
{res}unexplained gap:  17.394694
{txt}
{com}. di "explained percent: ", 100*( `reweightedmean'-`startingmean' ) / ( `targetmean'-`startingmean' )
{res}explained percent:  6.8115562
{txt}
{com}. 
. 
. gen inputbin_cent = mother_height_centile
{txt}
{com}. 
. egen overallbins_cent = group(inputbin_cent group) if full == 1
{txt}
{com}. gen weightforsumming_cent = sample_weight if full == 1
{txt}
{com}. egen sumweights_cent = sum(weightforsumming_cent) if full == 1, by(overallbins_cent)
{txt}
{com}. gen sumweights1_cent = sumweights_cent if group == 1
{txt}(215,603 missing values generated)

{com}. egen transfersumweights_cent = mean(sumweights1_cent), by(inputbin_cent)
{txt}
{com}. gen multiplier_cent = transfersumweights_cent/sumweights_cent if group == 0
{txt}(41,394 missing values generated)

{com}. gen newweights_cent = sample_weight*multiplier_cent if group == 0
{txt}(41,394 missing values generated)

{com}. 
. sum outcomevariable [aweight = newweights_cent] if group == 0

{txt}    Variable {c |}     Obs      Weight        Mean   Std. Dev.       Min        Max
{hline 13}{c +}{hline 65}
outcomevar~e {c |}{res} 215,603  44180.4857    27.19064    162.639          0       1000
{txt}
{com}. local reweightedmean = r(mean)
{txt}
{com}. 
. di "CENTILE CALCULATION:"
{res}CENTILE CALCULATION:
{txt}
{com}. di "explained gap: ",`reweightedmean'-`startingmean'
{res}explained gap:  1.3284035
{txt}
{com}. di "unexplained gap: ",`targetmean'-`reweightedmean'
{res}unexplained gap:  17.337746
{txt}
{com}. di "explained percent: ", 100*( `reweightedmean'-`startingmean' ) / ( `targetmean'-`startingmean' )
{res}explained percent:  7.1166443
{txt}
{com}. 
. * here you have the CDF:
. 
. *preserve
. *gen onesandtwos = 2 - group if full
. *expand onesandtwos, gen(itsadup)
. *tab group itsadup
. *tab group itsadup if full
. *replace sample_weight = sample_weight*multiplier if itsadup == 1
. *gen group3 = group - itsadup
. *cdfplot outcomevariable [aweight=sample_weight] if full, by(group3) graphr(c(white) lc(white)) name(cdfgraph) legend(col(3) order(1 "reweighted group0" 2 "original group0" 3 "group1")) xtitle("replace with outcome variable units") ytitle("cumulative distribution") 
. *graph save cdfgraph "GraphfilenameCDF.gph", replace
. *graph export "GraphfilenameCDF.pdf", as(pdf) replace
. *restore
. 
. * A normal way to make the decomposition table would be for different rows (each showing the explained gap and percent explained) to use different methods and controls
. 
. **************************************************************
. ** Keep at the end to close your log *************************
. **************************************************************
. capture log close
{smcl}
{com}{sf}{ul off}